swagger: '2.0'
info:
  description: Online Note
  version: 1.0.0
  title: Notee
  # put the contact info for your development or API team
  contact:
    email: yudhaseptiandry@gmail.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: Auth
  description: Authentication Api

paths:
  /login:
    post:
      tags:
      - Auth
      summary: login users
      description: |
        Passing Username And Password to get Token JWT
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Login User
        description: Login User
        schema:
          $ref: '#/definitions/Login'
      responses:
        200:
          description: Response Auth Login
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 200
              message:
                type: string
                example: 'OK'
              data:
                $ref: '#/definitions/JWT'
        400:
          description: invalid input, object invalid
  /register:
    post:
      tags:
      - Auth
      summary: Register User
      description: |
        send some data register
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Register User
        description: Register User
        schema:
          type: object
          required:
          - name
          - email
          - password
          properties:
            name:
              type: string
              example: Yudha
            email:
              type: string
              format: email
              example: yudha.pradana@amartha.com
            password:
              type: string
              example: k!UUdja21Sxh
      responses:
        200:
          description: Response User Register
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 200
              message:
                type: string
                example: 'OK'
              data:
                $ref: '#/definitions/Register'
        400:
          description: Bad Request
  /categories:
    get:
      security:
        - bearerAuth: []
      tags:
      - Kategori
      summary: Kategori Note
      description: |
        get some data category
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Response Get Category
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 200
              message:
                type: string
                example: 'OK'
              data:
                $ref: '#/definitions/ListCategories'
        400:
          description: Bad Request
    post:
      security:
          - bearerAuth: []
      tags:
      - Kategori
      summary: Kategori Note
      description: |
        post data category
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Post Category
        description: Category Note
        schema:
          type: object
          required:
          - name
          properties:
            name:
              type: string
              example: Puisi
      responses:
        200:
          description: Response Post Category
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 200
              message:
                type: string
                example: 'OK'
              data:
                $ref: '#/definitions/Categories'
        400:
          description: Bad Request
  /categories/{catID}:
    get:
      security:
          - bearerAuth: []
      summary: Returns a Category by ID.
      parameters:
        - in: path
          name: catID
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/EditCategories'     
    put:
      security:
        - bearerAuth: []
      summary: Update a Category by ID.
      parameters:
        - in: path
          name: catID
          required: true
          type: integer
        - in: body
          name: Put Category
          description: Category Note Update
          schema:
            type: object
            required:
            - name
            properties:
              name:
                type: string
                example: Puisi Update
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Categories'     
    delete:
      security:
        - bearerAuth: []
      summary: Update a Category by ID.
      parameters:
        - in: path
          name: catID
          required: true
          type: integer
      responses:
        200:
          description: OK
  /note:
    get:
      security:
        - bearerAuth: []
      tags:
      - Note
      summary: Note
      description: |
        get some data note
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Response Get Note
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 200
              message:
                type: string
                example: 'OK'
              data:
                $ref: '#/definitions/ListNots'
        400:
          description: Bad Request
    post:
      security:
          - bearerAuth: []
      tags:
      - Note
      summary: Note
      description: |
        post data Note
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Post Note
        description: Note
        schema:
          type: object
          required:
          - user_id
          - category_id
          - title
          - note
          - is_free
          properties:
            user_id :
              type: integer
              example: 1
            category_id :
              type: integer
              example: 1
            title:
              type: string
              example: Puisi Aku
            note:
              type: string
              example: Aku adalah aku
            is_free:
              type: boolean
              example: true
      responses:
        200:
          description: Response Post Note
          schema:
            type: object
            properties:
              status_code:
                type: integer
                example: 200
              message:
                type: string
                example: 'OK'
              data:
                $ref: '#/definitions/Notes'
        400:
          description: Bad Request    
definitions:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  Login:
    type: object
    required:
    - email
    - password
    properties:
      email:
        type: string
        example: john.doe@gmail.com
      password:
        type: string
        example: QwanjjaseuQeq
        description: encrypted password AES
  Register:
    type: object
    required:
    - name
    - email
    - password
    properties:
      name:
        type: string
        example: John Doe
      email:
        type: string
        example: john.doe@gmail.com
      password:
        type: string
        example: QwanjjaseuQeq
        description: encrypted password AES
  Categories:
    type: object
    required:
    - id
    - name
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: Puisi
  EditCategories:
    type: object
    required:
    - id
    - name
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: Puisi
  ListCategories:
    type: array object
    required:
    - id
    - name
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: Puisi
  Notes:
    type: object
    required:
    - id
    - user_id
    - category_id
    - title
    - note
    - is_free
    properties:
      id:
        type: integer
        example: 1
      user_id:
        type: integer
        example: 1
      category_id:
        type: integer
        example: 1
      title:
        type: string
        example: Aku
      note:
        type: string
        example: Aku adalah Aku
      is_free:
        type: boolean
        example: true
  EditNotes:
    type: object
    required:
    - id
    - user_id
    - name
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: Puisi
  ListNotes:
    type: array object
    required:
    - id
    - user_id
    - user_name
    - category_id
    - category_name
    - title
    - note
    - is_free
    properties:
      id:
        type: integer
        example: 1
      user_id:
        type: integer
        example: 1
      user_name:
        type: string
        example: Yudha
      category_id:
        type: integer
        example: 1
      category_name:
        type: string
        example: Puisi
      title:
        type: string
        example: Aku
      note:
        type: string
        example: Aku adalah Aku
      is_free:
        type: boolean
        example: true
  JWT:
    type: object
    required:
    - token
    - expire_token
    - refresh_token
    - expire_refresh_token
    properties:
      email:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.|eyJleHAiOjE2Mjg1MTA1NzcsImp0aSI6ImV5SmhiR2NpT2l a7C6ZcazsgjdKXR2eXOPRzBhRv99NOaDMNN2gyYDE2Y
      expire_token:
        type: string
        example: 2021-08-09T12:02:57Z
        format: date-time
      refresh_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.|eyJleHAiOjE2Mjg1MTA1NzcsImp0aSI6ImV5SmhiR2NpT2l a7C6ZcazsgjdKXR2eXOPRzBhRv99NOaDMNN2gyYDE2Y
      expire_refresh_token:
        type: string
        example: 2021-08-09T12:02:57Z
        format: date-time
security:
  - bearerAuth: []